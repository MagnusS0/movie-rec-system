{"timestamp": 1695338476.463422, "stored_source_code": "# declare a list tasks whose products you want to use as inputs\nupstream = None\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Load the SQL magic extension\n%reload_ext sql\n# Set display limit\n%config SqlMagic.displaylimit = 20\n# Connect to the DuckDB\n%sql duckdb:///../movies_data.duckdb\n%%sql\nSELECT column_name, data_type \nFROM information_schema.columns \nWHERE table_name = 'movies';\n\n%%sql\nSELECT column_name, data_type \nFROM information_schema.columns \nWHERE table_name = 'genres';\n%%sql\n-- # Change the data type from BIGINT to INT\nALTER TABLE movies ALTER COLUMN id TYPE INT;\nALTER TABLE movies ALTER COLUMN vote_count TYPE INT;\nALTER TABLE movies ALTER COLUMN genre_ids TYPE INT[];\nALTER TABLE genres ALTER COLUMN id TYPE INT;\n%%sql\n-- # Drop columns ending with _path\nALTER TABLE movies DROP COLUMN backdrop_path;\nALTER TABLE movies DROP COLUMN poster_path;\n%%sql \nSELECT *\nFROM movies\nLIMIT 2;\n%%sql \nSELECT *\nFROM genres\nLIMIT 2;\n%%sql \nWITH ExpandedGenres AS (\n    SELECT \n        m.id AS movie_id,\n        mg.movie_genre_id,\n        g.name AS genre_name\n    FROM \n        (SELECT UNNEST(movies.genre_ids) as movie_genre_id, movies.id FROM movies) AS mg\n    JOIN \n        movies m ON mg.id = m.id\n    JOIN \n        genres g ON mg.movie_genre_id = g.id\n)\n\nSELECT\n    movie_id,\n    STRING_AGG(genre_name, ', ') AS genre_names\nFROM \n    ExpandedGenres\nGROUP BY \n    movie_id;\n%%sql --no-execute\nCREATE TABLE IF NOT EXISTS movie_genre_data AS\nWITH ExpandedGenres AS (\n    SELECT \n        m.id AS movie_id,\n        mg.movie_genre_id,\n        g.name AS genre_name\n    FROM \n        (SELECT UNNEST(movies.genre_ids) as movie_genre_id, movies.id FROM movies) AS mg\n    JOIN \n        movies m ON mg.id = m.id\n    JOIN \n        genres g ON mg.movie_genre_id = g.id\n),\ngenre_names AS (\n    SELECT\n    movie_id,\n    STRING_AGG(genre_name, ', ') AS genre_names\nFROM \n    ExpandedGenres\nGROUP BY \n    movie_id\n)\nSELECT gn.genre_names, m.id, m.original_language,\n       m.overview, m.popularity, m.release_date,\n       m.title, m.vote_average, m.vote_count\nFROM genre_names gn\nJOIN movies m\nON gn.movie_id = m.id\nWHERE m.vote_count != 0\n%%sql\nSELECT *\nFROM movie_genre_data\nLIMIT 2;\n### What are the most popular genres? \n%%sql --save genre_pop --no-execute\nWITH ExpandedGenres AS (\n    SELECT \n        m.id AS movie_id,\n        mg.movie_genre_id,\n        g.name AS genre_name\n    FROM \n        (SELECT UNNEST(movies.genre_ids) as movie_genre_id, movies.id FROM movies) AS mg\n    JOIN \n        movies m ON mg.id = m.id\n    JOIN \n        genres g ON mg.movie_genre_id = g.id\n)\nSELECT\ngenre_name, \nSUM(m.popularity) AS genre_popularity\nFROM ExpandedGenres\nJOIN movies m\nON ExpandedGenres.movie_id = m.id\nGROUP BY genre_name\nORDER BY genre_popularity DESC;\n\n%sqlplot bar --table genre_pop --column genre_name genre_popularity --orient h\n### What are the most popular movies?\n%%sql --save top10 --no-execute\nSELECT title, popularity\nFROM movies\nORDER BY popularity DESC\nLIMIT 10;\n%sqlplot bar --table top10 --column title popularity --orient h\n### What are the most popular movies by genre?\n%%sql --save top10_genre --no-execute\nWITH ExpandedGenres AS (\n    SELECT \n        m.id AS movie_id,\n        mg.movie_genre_id,\n        g.name AS genre_name\n    FROM \n        (SELECT UNNEST(movies.genre_ids) as movie_genre_id, movies.id FROM movies) AS mg\n    JOIN \n        movies m ON mg.id = m.id\n    JOIN \n        genres g ON mg.movie_genre_id = g.id\n),\nRankedMovies AS (\n    SELECT \n        m.title,\n        eg.genre_name,\n        m.popularity,\n        ROW_NUMBER() OVER (PARTITION BY eg.genre_name ORDER BY m.popularity DESC) AS rn\n    FROM movies m\n    JOIN ExpandedGenres eg ON m.id = eg.movie_id\n)\nSELECT \n    title, \n    genre_name, \n    popularity\nFROM RankedMovies\nWHERE rn = 1\nORDER BY popularity DESC\nLIMIT 10;\n\nresult = %sql SELECT * FROM top10_genre\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Assuming top10_genre is the DataFrame saved from your SQL query\nsns.barplot(data=result, x='popularity', y='title', hue='genre_name', orient='h')\nplt.title('Top 10 Popular Movies by Genre')\nplt.legend(title='Genre Name', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()\n ### What are the most popular movies by decade?\n%%sql --save top_decade --no-execute\nWITH RankedMovies AS (\n    SELECT \n        FLOOR(YEAR(release_date) / 10) * 10 AS decade,\n        title,\n        popularity,\n        RANK() OVER (PARTITION BY FLOOR(YEAR(release_date) / 10) * 10 ORDER BY popularity DESC) AS rank_in_decade\n    FROM movie_genre_data\n)\nSELECT \n    decade,\n    title,\n    popularity,\n    rank_in_decade\nFROM RankedMovies\nWHERE rank_in_decade <= 2  -- adjust this to get the top N movies in each decade\nORDER BY decade, rank_in_decade;\n\n\nresult = %sql SELECT * FROM top_decade\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# let us plot the top 2 movies in each decade by popularity putting them side by side in a bar chart, with no hue\nplt.figure(figsize=(15, 8))\nsns.barplot(data=result, x='decade', y='popularity',hue='title', orient='v')\nplt.yscale('log')  # log scale for better visualization\nplt.title('Top 2 Movies in Each Decade by Popularity')\nplt.legend(title='Movie Title', bbox_to_anchor=(1.05, 1), loc='upper left')\nplt.show()\n\n", "params": {}}